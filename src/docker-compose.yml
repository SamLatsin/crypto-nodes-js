version: '3.9'

services:
  postgres:
    container_name: postgres
    image: postgres:15.0
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "${PG_DBNAME}"
      POSTGRES_USER: "${PG_USER}"
      POSTGRES_PASSWORD: "${PG_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./1. Init Database:/docker-entrypoint-initdb.d
      - .:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DBNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.15
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "${PG_PASSWORD}"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: none

  pgbackups:
    container_name: pgbackup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backup:/backups
    links:
      - postgres:postgres
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${PG_DBNAME}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@every 1h0m00s
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=81

  nginx:
    container_name: nginx
    image: nginx
    restart: on-failure
    links:
      - app
    ports:
      - 80:80
    volumes:
      - ./nginx-default.conf:/etc/nginx/conf.d/default.conf
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  app:
    container_name: node
    build: ./app
    restart: on-failure
    depends_on:
      - postgres
    ports:
      - "5656:5656"
    volumes:
      - ./app/:/usr/src/app
      - /usr/src/app/node_modules
      - ./bitcoin-data:/root/bitcoin-data
    depends_on:
      - bitcoin
    env_file:
      - .env

  # bitcoin:
  #   container_name: bitcoin
  #   image: kylemanna/bitcoind:latest
  #   restart: on-failure
  #   volumes:
  #     - ./bitcoin-data:/bitcoin/.bitcoin
  #     - type: bind
  #       source: ./notify.sh
  #       target: /bin/notify.sh
  #     - type: bind
  #       source: ./healthcheck.sh
  #       target: /bin/healthcheck.sh
  #   environment:
  #     BTC_TOKEN: ${BTC_TOKEN}
  #     BTC_RPC_USER: ${BTC_RPC_USER}
  #     BTC_RPC_PASSWORD: ${BTC_RPC_PASSWORD}
  #   healthcheck:
  #     interval: 10s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 10s
  #     test: /bin/healthcheck.sh
  #   command:
  #     -printtoconsole=0
  #     -rpcuser=${BTC_RPC_USER} 
  #     -rpcpassword=${BTC_RPC_PASSWORD}
  #     -server
  #     -rpcport=8332
  #     -txindex=1
  #     -dbcache=16000
  #     -rpcworkqueue=1000
  #     -rpcallowip=0.0.0.0/0
  #     -rpcbind=0.0.0.0
  #     -testnet=${BTC_TESTNET}
  #     -disablewallet=0
  #     -"walletnotify=/bin/notify.sh %s %w"

  # geth:
  #   container_name: geth
  #   image: ethereum/client-go:latest
  #   volumes:
  #     - ./ethereum-data/geth:/root/.ethereum
  #     - type: bind
  #       source: ./configs/eth.toml
  #       target: /root/config.toml
  #   restart: on-failure
  #   ports:
  #     - 30303:30303
  #   command:
  #     --http 
  #     --http.api personal,eth,net,web3 
  #     --http.port 8545
  #     --http.addr 0.0.0.0
  #     --http.vhosts *
  #     --config "/root/config.toml" 
  #     --cache 2048

  # prysm:
  #   container_name: prysm
  #   image: prysmaticlabs/prysm-beacon-chain:latest
  #   volumes:
  #     - ./ethereum-data/prysm:/root/prysm-data
  #     - ./ethereum-data/geth:/root/geth
  #   depends_on:
  #     - geth
  #   restart: on-failure
  #   command:
  #     --accept-terms-of-use
  #     --execution-endpoint=geth
  #     --datadir=/root/prysm-data
  #     --execution-endpoint=/root/geth/geth.ipc
  #     # --authrpc.addr=geth

  geth-sepolia:
    container_name: geth-sepolia
    image: ethereum/client-go:latest
    volumes:
      - ./ethereum-sepolia-data/geth:/root/.ethereum
      - type: bind
        source: ./configs/eth.toml
        target: /root/config.toml
    restart: on-failure
    ports:
      - 30303:30303
      - 30304:30304
    command:
      --sepolia
      --http 
      --http.api personal,eth,net,web3 
      --http.port 8545
      --http.addr 0.0.0.0
      --http.vhosts *
      --config "/root/config.toml" 
      --cache 2048

  prysm-sepolia:
    container_name: prysm-sepolia
    image: prysmaticlabs/prysm-beacon-chain:latest
    volumes:
      - ./ethereum-sepolia-data/prysm:/root/prysm-data
      - ./ethereum-sepolia-data/geth:/root/geth
      - type: bind
        source: ./configs/genesis.ssz
        target: /root/genesis.ssz
    depends_on:
      - geth-sepolia
    restart: on-failure
    command:
      --sepolia
      --accept-terms-of-use
      --execution-endpoint=geth
      --datadir=/root/prysm-data
      --execution-endpoint=/root/geth/sepolia/geth.ipc
      --genesis-state=/root/genesis.ssz
